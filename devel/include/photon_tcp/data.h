// Generated by gencpp from file photon_tcp/data.msg
// DO NOT EDIT!


#ifndef PHOTON_TCP_MESSAGE_DATA_H
#define PHOTON_TCP_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace photon_tcp
{
template <class ContainerAllocator>
struct data_
{
  typedef data_<ContainerAllocator> Type;

  data_()
    : ip_address()
    , data()  {
    }
  data_(const ContainerAllocator& _alloc)
    : ip_address(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_address_type;
  _ip_address_type ip_address;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::photon_tcp::data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::photon_tcp::data_<ContainerAllocator> const> ConstPtr;

}; // struct data_

typedef ::photon_tcp::data_<std::allocator<void> > data;

typedef boost::shared_ptr< ::photon_tcp::data > dataPtr;
typedef boost::shared_ptr< ::photon_tcp::data const> dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::photon_tcp::data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::photon_tcp::data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::photon_tcp::data_<ContainerAllocator1> & lhs, const ::photon_tcp::data_<ContainerAllocator2> & rhs)
{
  return lhs.ip_address == rhs.ip_address &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::photon_tcp::data_<ContainerAllocator1> & lhs, const ::photon_tcp::data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace photon_tcp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::photon_tcp::data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::photon_tcp::data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::photon_tcp::data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::photon_tcp::data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::photon_tcp::data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::photon_tcp::data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::photon_tcp::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c1f1555d04a791e7f80e64d4a99bed2";
  }

  static const char* value(const ::photon_tcp::data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c1f1555d04a791eULL;
  static const uint64_t static_value2 = 0x7f80e64d4a99bed2ULL;
};

template<class ContainerAllocator>
struct DataType< ::photon_tcp::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "photon_tcp/data";
  }

  static const char* value(const ::photon_tcp::data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::photon_tcp::data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ip_address\n"
"string data\n"
;
  }

  static const char* value(const ::photon_tcp::data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::photon_tcp::data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ip_address);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::photon_tcp::data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::photon_tcp::data_<ContainerAllocator>& v)
  {
    s << indent << "ip_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip_address);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PHOTON_TCP_MESSAGE_DATA_H
