// Generated by gencpp from file universal_robots/position.msg
// DO NOT EDIT!


#ifndef UNIVERSAL_ROBOTS_MESSAGE_POSITION_H
#define UNIVERSAL_ROBOTS_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace universal_robots
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : q()
    , p()  {
      q.assign(0.0);

      p.assign(0.0);
  }
  position_(const ContainerAllocator& _alloc)
    : q()
    , p()  {
  (void)_alloc;
      q.assign(0.0);

      p.assign(0.0);
  }



   typedef boost::array<double, 4>  _q_type;
  _q_type q;

   typedef boost::array<double, 3>  _p_type;
  _p_type p;





  typedef boost::shared_ptr< ::universal_robots::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::universal_robots::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::universal_robots::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::universal_robots::position > positionPtr;
typedef boost::shared_ptr< ::universal_robots::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::universal_robots::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::universal_robots::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::universal_robots::position_<ContainerAllocator1> & lhs, const ::universal_robots::position_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q &&
    lhs.p == rhs.p;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::universal_robots::position_<ContainerAllocator1> & lhs, const ::universal_robots::position_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace universal_robots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::universal_robots::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::universal_robots::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::universal_robots::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::universal_robots::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::universal_robots::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::universal_robots::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::universal_robots::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21488d769179605c39d61887a714ba19";
  }

  static const char* value(const ::universal_robots::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21488d769179605cULL;
  static const uint64_t static_value2 = 0x39d61887a714ba19ULL;
};

template<class ContainerAllocator>
struct DataType< ::universal_robots::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "universal_robots/position";
  }

  static const char* value(const ::universal_robots::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::universal_robots::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] q\n"
"float64[3] p\n"
;
  }

  static const char* value(const ::universal_robots::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::universal_robots::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.p);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::universal_robots::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::universal_robots::position_<ContainerAllocator>& v)
  {
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "p[]" << std::endl;
    for (size_t i = 0; i < v.p.size(); ++i)
    {
      s << indent << "  p[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.p[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNIVERSAL_ROBOTS_MESSAGE_POSITION_H
