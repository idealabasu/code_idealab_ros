// Generated by gencpp from file thorlabs_linear_actuator/write.msg
// DO NOT EDIT!


#ifndef THORLABS_LINEAR_ACTUATOR_MESSAGE_WRITE_H
#define THORLABS_LINEAR_ACTUATOR_MESSAGE_WRITE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace thorlabs_linear_actuator
{
template <class ContainerAllocator>
struct write_
{
  typedef write_<ContainerAllocator> Type;

  write_()
    : register(0)
    , value(0)  {
    }
  write_(const ContainerAllocator& _alloc)
    : register(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _register_type;
  _register_type register;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::thorlabs_linear_actuator::write_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thorlabs_linear_actuator::write_<ContainerAllocator> const> ConstPtr;

}; // struct write_

typedef ::thorlabs_linear_actuator::write_<std::allocator<void> > write;

typedef boost::shared_ptr< ::thorlabs_linear_actuator::write > writePtr;
typedef boost::shared_ptr< ::thorlabs_linear_actuator::write const> writeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thorlabs_linear_actuator::write_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thorlabs_linear_actuator::write_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::thorlabs_linear_actuator::write_<ContainerAllocator1> & lhs, const ::thorlabs_linear_actuator::write_<ContainerAllocator2> & rhs)
{
  return lhs.register == rhs.register &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::thorlabs_linear_actuator::write_<ContainerAllocator1> & lhs, const ::thorlabs_linear_actuator::write_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace thorlabs_linear_actuator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thorlabs_linear_actuator::write_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thorlabs_linear_actuator::write_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thorlabs_linear_actuator::write_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42a1ebb3a1d2bdfda4b28ad577afa942";
  }

  static const char* value(const ::thorlabs_linear_actuator::write_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42a1ebb3a1d2bdfdULL;
  static const uint64_t static_value2 = 0xa4b28ad577afa942ULL;
};

template<class ContainerAllocator>
struct DataType< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thorlabs_linear_actuator/write";
  }

  static const char* value(const ::thorlabs_linear_actuator::write_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 register\n"
"uint8 value\n"
"\n"
;
  }

  static const char* value(const ::thorlabs_linear_actuator::write_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.register);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct write_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thorlabs_linear_actuator::write_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thorlabs_linear_actuator::write_<ContainerAllocator>& v)
  {
    s << indent << "register: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.register);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THORLABS_LINEAR_ACTUATOR_MESSAGE_WRITE_H
