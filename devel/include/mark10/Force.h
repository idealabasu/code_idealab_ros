// Generated by gencpp from file mark10/Force.msg
// DO NOT EDIT!


#ifndef MARK10_MESSAGE_FORCE_H
#define MARK10_MESSAGE_FORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mark10
{
template <class ContainerAllocator>
struct Force_
{
  typedef Force_<ContainerAllocator> Type;

  Force_()
    : force(0.0)
    , unit()  {
    }
  Force_(const ContainerAllocator& _alloc)
    : force(0.0)
    , unit(_alloc)  {
  (void)_alloc;
    }



   typedef float _force_type;
  _force_type force;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unit_type;
  _unit_type unit;





  typedef boost::shared_ptr< ::mark10::Force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mark10::Force_<ContainerAllocator> const> ConstPtr;

}; // struct Force_

typedef ::mark10::Force_<std::allocator<void> > Force;

typedef boost::shared_ptr< ::mark10::Force > ForcePtr;
typedef boost::shared_ptr< ::mark10::Force const> ForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mark10::Force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mark10::Force_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mark10::Force_<ContainerAllocator1> & lhs, const ::mark10::Force_<ContainerAllocator2> & rhs)
{
  return lhs.force == rhs.force &&
    lhs.unit == rhs.unit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mark10::Force_<ContainerAllocator1> & lhs, const ::mark10::Force_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mark10

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mark10::Force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mark10::Force_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mark10::Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mark10::Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mark10::Force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mark10::Force_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mark10::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef3c99a919c971d6e0f206376229102e";
  }

  static const char* value(const ::mark10::Force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef3c99a919c971d6ULL;
  static const uint64_t static_value2 = 0xe0f206376229102eULL;
};

template<class ContainerAllocator>
struct DataType< ::mark10::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mark10/Force";
  }

  static const char* value(const ::mark10::Force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mark10::Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 force\n"
"string unit\n"
;
  }

  static const char* value(const ::mark10::Force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mark10::Force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force);
      stream.next(m.unit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mark10::Force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mark10::Force_<ContainerAllocator>& v)
  {
    s << indent << "force: ";
    Printer<float>::stream(s, indent + "  ", v.force);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARK10_MESSAGE_FORCE_H
