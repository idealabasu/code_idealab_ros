// Generated by gencpp from file ati_nano/write.msg
// DO NOT EDIT!


#ifndef ATI_NANO_MESSAGE_WRITE_H
#define ATI_NANO_MESSAGE_WRITE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ati_nano
{
template <class ContainerAllocator>
struct write_
{
  typedef write_<ContainerAllocator> Type;

  write_()
    : fx(0.0)
    , fy(0.0)
    , fz(0.0)
    , tx(0.0)
    , ty(0.0)
    , tz(0.0)  {
    }
  write_(const ContainerAllocator& _alloc)
    : fx(0.0)
    , fy(0.0)
    , fz(0.0)
    , tx(0.0)
    , ty(0.0)
    , tz(0.0)  {
  (void)_alloc;
    }



   typedef float _fx_type;
  _fx_type fx;

   typedef float _fy_type;
  _fy_type fy;

   typedef float _fz_type;
  _fz_type fz;

   typedef float _tx_type;
  _tx_type tx;

   typedef float _ty_type;
  _ty_type ty;

   typedef float _tz_type;
  _tz_type tz;





  typedef boost::shared_ptr< ::ati_nano::write_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ati_nano::write_<ContainerAllocator> const> ConstPtr;

}; // struct write_

typedef ::ati_nano::write_<std::allocator<void> > write;

typedef boost::shared_ptr< ::ati_nano::write > writePtr;
typedef boost::shared_ptr< ::ati_nano::write const> writeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ati_nano::write_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ati_nano::write_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ati_nano::write_<ContainerAllocator1> & lhs, const ::ati_nano::write_<ContainerAllocator2> & rhs)
{
  return lhs.fx == rhs.fx &&
    lhs.fy == rhs.fy &&
    lhs.fz == rhs.fz &&
    lhs.tx == rhs.tx &&
    lhs.ty == rhs.ty &&
    lhs.tz == rhs.tz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ati_nano::write_<ContainerAllocator1> & lhs, const ::ati_nano::write_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ati_nano

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ati_nano::write_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ati_nano::write_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ati_nano::write_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ati_nano::write_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ati_nano::write_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ati_nano::write_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ati_nano::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "525bd7f46f455baf22b587d94f926977";
  }

  static const char* value(const ::ati_nano::write_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x525bd7f46f455bafULL;
  static const uint64_t static_value2 = 0x22b587d94f926977ULL;
};

template<class ContainerAllocator>
struct DataType< ::ati_nano::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ati_nano/write";
  }

  static const char* value(const ::ati_nano::write_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ati_nano::write_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 fx\n"
"float32 fy\n"
"float32 fz\n"
"float32 tx\n"
"float32 ty\n"
"float32 tz\n"
;
  }

  static const char* value(const ::ati_nano::write_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ati_nano::write_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fx);
      stream.next(m.fy);
      stream.next(m.fz);
      stream.next(m.tx);
      stream.next(m.ty);
      stream.next(m.tz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct write_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ati_nano::write_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ati_nano::write_<ContainerAllocator>& v)
  {
    s << indent << "fx: ";
    Printer<float>::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    Printer<float>::stream(s, indent + "  ", v.fy);
    s << indent << "fz: ";
    Printer<float>::stream(s, indent + "  ", v.fz);
    s << indent << "tx: ";
    Printer<float>::stream(s, indent + "  ", v.tx);
    s << indent << "ty: ";
    Printer<float>::stream(s, indent + "  ", v.ty);
    s << indent << "tz: ";
    Printer<float>::stream(s, indent + "  ", v.tz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATI_NANO_MESSAGE_WRITE_H
